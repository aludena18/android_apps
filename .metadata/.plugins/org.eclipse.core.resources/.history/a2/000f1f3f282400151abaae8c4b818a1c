package com.alg.alarmservicelocation;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Locale;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.location.LocationManager;
import android.os.Handler;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.util.Log;

import com.alg.getset.GpsData;
import com.alg.getset.GsmData;
import com.alg.listener.LocationListenerGps;
import com.alg.listener.LocationListenerGsm;

public class AlarmBreceiver extends BroadcastReceiver{
	
	LocationManager locationManager;
	LocationListenerGps locListenerGps;
	
	static final int SINC_TIME = 20;
	static final int SERVER_PORT = 21020;
	static final String SERVER_IP = "107.172.12.220";			//VPS=107.172.12.220/21020 ; Servidor Hunter=190.223.20.12/13000
	
	GsmData gsmData;
	GpsData gpsData;

	@Override
	public void onReceive(Context context, Intent intent) {
		// TODO Auto-generated method stub
		
		//INICIO DEL MANAGER GSM
		TelephonyManager telManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		GsmCellLocation gsmCelLoc = (GsmCellLocation)telManager.getCellLocation();
		LocationListenerGsm locListenerGsm = new LocationListenerGsm(telManager, gsmCelLoc);
		gsmData = locListenerGsm.getGsmData();
		
		//INICIO DEL MANAGER GPS
		locationManager = (LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
		locListenerGps = new LocationListenerGps(telManager.getDeviceId());
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locListenerGps);
		gpsData = locListenerGps.getGpsData();
		
		
		/*Hora del sistema*/
    	long date = System.currentTimeMillis();
		SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd/ HH:mm:ss",Locale.US);
		System.out.println("Runnin -- " + sdf.format(date));
		
		//HANDLER DE SINCRONIZACION Y ENVIO
		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				Log.e("ALARM RECEIVER", "After " + SINC_TIME + " secs");
				if(locationManager!=null){
					locationManager.removeUpdates(locListenerGps);
					locationManager = null;
					locListenerGps = null;
					Log.e("ALARM RECEIVER", "locationManager and locListenerGps have been removed");
				}
				new Thread(new Runnable() {
					@Override
					public void run() {
						sendFrame(gsmData, gpsData);
					}
				}).start();
			}
		}, SINC_TIME*1000);
		
	}
	
	private void sendFrame(GsmData gsmD, GpsData gpsD){
		byte[] dataToSend = new byte[1024];
		String frameGSM = "" + gsmD.getFrameGsm();
		String frameGPS = "" + gpsD.getFrameGps();
		
		Log.d("abel--MiLocManager--GSM", frameGSM);
		Log.d("abel- miLocManager--GPS", frameGPS);
		
		if(frameGPS.trim().startsWith("$$A")) dataToSend = frameGPS.getBytes();
		else if(frameGSM.trim().startsWith("**V")) dataToSend = frameGSM.getBytes();
		
		try {
			InetAddress ip = InetAddress.getByName(SERVER_IP);
			DatagramSocket clSocket = new DatagramSocket();
			DatagramPacket dgPacket = new DatagramPacket(dataToSend, dataToSend.length, ip, SERVER_PORT);
			clSocket.send(dgPacket);
			clSocket.close();
			System.out.println("Enviado : " + new String(dataToSend));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
