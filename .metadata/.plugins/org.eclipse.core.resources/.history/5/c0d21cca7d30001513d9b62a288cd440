package com.alg.alarmservicelocation;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Locale;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.location.LocationManager;
import android.os.Handler;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.alg.getset.GpsData;
import com.alg.getset.GsmData;
import com.alg.listener.LocationListenerGps;
import com.alg.listener.LocationListenerGsm;

public class AlarmBreceiver extends BroadcastReceiver{

	LocationManager locationManager = null;
	LocationListenerGps locListenerGps = null;
	LocationListenerGsm locListenerGsm = null;

	static final int SINC_TIME = 40;
	static final String EVENT_NUMBER = "35";

	static final int SERVER_PORT = 13000;
	static final String SERVER_IP = "190.223.20.12";			//VPS=107.172.12.220/21020 ; Servidor Hunter=190.223.20.12/13000

	static final int VPS_SERVER_PORT = 21020;
	static final String VPS_SERVER_IP = "107.172.12.220";
	
	GsmData gsmData;
	GpsData gpsData;

	@Override
	public void onReceive(Context context, Intent intent) {
		// TODO Auto-generated method stub

		/*Hora del sistema*/
		long date = System.currentTimeMillis();
		SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd/ HH:mm:ss",Locale.US);
		System.out.println("Runnin -- " + sdf.format(date));

		//INICIO DEL MANAGER GSM
		System.out.println("iniciando Telephony Manager");
		TelephonyManager telManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		System.out.println("iniciando locListenerGsm");
		locListenerGsm = new LocationListenerGsm(telManager, EVENT_NUMBER);

		//INICIO DEL MANAGER GPS
		locationManager = (LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
		locListenerGps = new LocationListenerGps(telManager.getDeviceId(), EVENT_NUMBER);
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locListenerGps);
		gpsData = locListenerGps.getGpsData();
		System.out.println("inicio del manager GPS completado");


		//HANDLER DE SINCRONIZACION Y ENVIO
		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				System.out.println("handler de envio");
				Log.e("ALARM RECEIVER", "After " + SINC_TIME + " secs");
				new Thread(new Runnable() {
					@Override
					public void run() {
						sendFrame();
						releaseListeners();
					}
				}).start();
			}
		}, SINC_TIME*1000);
	}

	private void sendFrame(){
		byte[] dataToSend = new byte[1024];
		String frameGSM = "" + locListenerGsm.getGsmData().getFrameGsm();
		String frameGPS = "" + gpsData.getFrameGps();

		Log.d("abel--MiLocManager--GSM", frameGSM);
		Log.d("abel- miLocManager--GPS", frameGPS);

		if(frameGPS.trim().startsWith("$$A")){
			dataToSend = frameGPS.getBytes();
			sendToHunter(dataToSend);
			sendToVPS(dataToSend);
		}
		else if(frameGSM.trim().startsWith("**V")){
			dataToSend = frameGSM.getBytes();
			sendToVPS(dataToSend);
		}
	}
	
	private void sendToHunter(byte[] d2s){
		try {
			DatagramSocket clSocket = new DatagramSocket();
			InetAddress ip = InetAddress.getByName(SERVER_IP);
			DatagramPacket dgPacket = new DatagramPacket(d2s, d2s.length, ip, SERVER_PORT);
			clSocket.send(dgPacket);
			clSocket.close();
			System.out.println("Enviado a Hunter: " + new String(d2s));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void sendToVPS(byte[] d2s){
		try {
			DatagramSocket clSocket2 = new DatagramSocket();
			InetAddress ip2 = InetAddress.getByName(VPS_SERVER_IP);
			DatagramPacket dgPacket2 = new DatagramPacket(d2s, d2s.length, ip2, VPS_SERVER_PORT);
			clSocket2.send(dgPacket2);
			clSocket2.close();
			System.out.println("Enviado a VPS: " + new String(d2s));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	

	private void releaseListeners(){
		if(locationManager!=null){
			locationManager.removeUpdates(locListenerGps);
			locationManager = null;
			locListenerGps = null;
			locListenerGsm = null;
			Log.e("ALARM RECEIVER", "locationManager y locListenerGps han sido removidos");
		}
	}

}
